;*
;* CLASS FILE cuiDriver.class
;*
	.INCLUDE	"global.inc"
	.INCLUDE	"dvm.inc"

CHARPTR	EQU	$A6
PARMS	EQU	$A8
PARMS_OP	EQU	PARMS+0
PARMS_STATUS	EQU	PARMS+0
PARMS_X	EQU	PARMS+1
PARMS_Y	EQU	PARMS+2
PARMS_WIDTH	EQU	PARMS+3
PARMS_HEIGHT	EQU	PARMS+4
PARMS_OFFSET	EQU	PARMS+3
PARMS_COUNT	EQU	PARMS+4
PARMS_FREQUENCY	EQU	PARMS+1
PARMS_DURATION	EQU	PARMS+2
PARMS_TIMBRE	EQU	PARMS+3
PARMS_XDST	EQU	PARMS+5
PARMS_YDST	EQU	PARMS+6
PARMS_CHAR_EVEN	EQU	PARMS+5
PARMS_CHAR_ODD	EQU	PARMS+6
PARMS_CURSOR	EQU	PARMS+7
PARMS_LEN	EQU	PARMS+7

.MACRO	CALCBASE	ROW, ADDR
	LDA	ROW
	AND	#$18
	ASL
	STA	ADDR
	ASL
	ASL
	ORA	ADDR
	STA	ADDR
	LDA	ROW
	AND	#$07
	ORA	#$08
	LSR
	STA	ADDR+1
	ROR	ADDR
.ENDMACRO
.MACRO	CHECKMOUSE	ROW, ADDR
	LDY	#(MOUSEY - DISPATCH)
	LDA	(NATIVECODEPTR),Y
	CMP	ROW
	BNE	:+
	DVM_ENTER
	LDZPW	ADDR
	CALL	HIDECURSOR
	DVM_EXIT
:
.ENDMACRO
	.ORG	$1000	; DUMMY ADDRESS
	.BYTE	$CA,$FE,$BA,$BE	; MAGIC
	.BYTE	$00,$00	; MINOR 0
	.BYTE	$00,$32	; MAJOR 50
;*
;* CONSTANT POOL
;*
	.BYTE	$00,$0E	; CONST POOL COUNT 14
;* CONST POOL INDEX 1
	.BYTE	$0A	; METHODREF
	.BYTE	$00,$04	; CLASS #4
	.BYTE	$00,$0A	; NAME AND TYPE #10
;* CONST POOL INDEX 2
	.BYTE	$08	; STRING
	.BYTE	$00,$0B	; #11
;* CONST POOL INDEX 3
	.BYTE	07	; CLASS
	.BYTE	$00,$0C	; #12
;* CONST POOL INDEX 4
	.BYTE	07	; CLASS
	.BYTE	$00,$0D	; #13
;* CONST POOL INDEX 5
	.BYTE	$01	; UTF8
	.BYTE	$00,$06	; STRLEN
	.BYTE	"<init>"
;* CONST POOL INDEX 6
	.BYTE	$01	; UTF8
	.BYTE	$00,$03	; STRLEN
	.BYTE	"()V"
;* CONST POOL INDEX 7
	.BYTE	$01	; UTF8
	.BYTE	$00,$04	; STRLEN
	.BYTE	"Code"
;* CONST POOL INDEX 8
	.BYTE	$01	; UTF8
	.BYTE	$00,$08	; STRLEN
	.BYTE	"dispatch"
;* CONST POOL INDEX 9
	.BYTE	$01	; UTF8
	.BYTE	$00,$17	; STRLEN
	.BYTE	"([BLjava/lang/Object;)I"
;* CONST POOL INDEX 10
	.BYTE	$0C	; NAME AND TYPE
	.BYTE	$00,$05	; NAME #5
	.BYTE	$00,$06	; DESC #6
;* CONST POOL INDEX 11
	.BYTE	$01	; UTF8
	.BYTE	$00,$04	; STRLEN
	.BYTE	"6502"
;* CONST POOL INDEX 12
	.BYTE	$01	; UTF8
	.BYTE	$00,$16	; STRLEN
	.BYTE	"org/vm02/cui/cuiDriver"
;* CONST POOL INDEX 13
	.BYTE	$01	; UTF8
	.BYTE	$00,$10	; STRLEN
	.BYTE	"java/lang/Object"
;*
;* ACCESS FLAGS
;*
	.BYTE	$00,$21	; 0x0021
;*
;* THIS CLASS
;*
	.BYTE	$00,$03	; #3
;*
;* SUPER CLASS
;*
	.BYTE	$00,$04	; #4
;*
;* INTERFACES
;*
	.BYTE	$00,$00	; IFACE COUNT 0
;*
;* FIELDS
;*
	.BYTE	$00,$00	; FIELD COUNT 0
;*
;* METHODS
;*
	.BYTE	$00,$02	; METHOD COUNT 2
;******* METHOD INDEX 0 ********
	.BYTE	$00,$01	; ACCESS FLAGS 0x0001
	.BYTE	$00,$05	; NAME #5
	.BYTE	$00,$06	; DESC #6
	.BYTE	$00,$01	; ATTRIB COUNT 1
;* ATTRIB INDEX 0
	.BYTE	$00,$07	; NAME #7
	.BYTE	$00,$00,>(M0A0END-M0A0BGN),<(M0A0END-M0A0BGN)
M0A0BGN:
;* CODE:
	.BYTE	$00,$01	; MAX STACK 1
	.BYTE	$00,$01	; MAX LOCALS 1
	.BYTE	$00,$00,>(M0C0END-M0C0BGN),<(M0C0END-M0C0BGN)
M0C0BGN:
	.BYTE	$2A	; 00000: aload_0
	.BYTE	$B7,$00,$01	; 00001: invokespecial #1
	.BYTE	$B1	; 00004: return
M0C0END:
;* EXCEPTION TABLE
	.BYTE	$00,$00	; COUNT 0
;* CODE ATTRIB
	.BYTE	$00,$00	; ATTRIB COUNT 0
M0A0END:
;******* METHOD INDEX 1 ********
	.BYTE	$01,$09	; ACCESS FLAGS 0x0009
	.BYTE	$00,$08	; NAME #8
	.BYTE	$00,$09	; DESC #9
	.BYTE	$00,$01	; ATTRIB COUNT 1
;* ATTRIB INDEX 0
	.BYTE	$00,$0B	; NAME #11
	.BYTE	$00,$00,>(M1A0END-M1A0BGN),<(M1A0END-M1A0BGN)
M1A0BGN:
;* CODE:
	.BYTE	$00,$01	; MAX STACK 1
	.BYTE	$00,$03	; MAX LOCALS 3
	.BYTE	$00,$00,>(M1C0END-M1C0BGN),<(M1C0END-M1C0BGN)
M1C0BGN:
DISPATCH:
	BCC	:+	; SKIP LOCAL VARS
;*
;* LOCAL VARS
;*
MOUSESTATE:	.BYTE	$00
MOUSECURSOR:	.BYTE	'B'	; MOUSETEXT ARROW
MOUSESAVEUNDER:	.BYTE	$00
MOUSEX:	.BYTE	$00
MOUSEY:	.BYTE	$FF	; MOUSE OFFSCREEN
;*
;* CODE
;*
:	LDA	HMETHODCODE
	LDX	HMETHODCODE+1
	LDY	LINK_HMEMLOCK
	STY	OPADDR
	LDY	LINK_HMEMLOCK+1
	STY	OPADDR+1
	JSR	OPJMP
	PLA		; SAVE RETURN ADDRESS
	STA	$A4
	PLA
	STA	$A5
	PLA		; PULL TEXT OBJECT
	STA	$A6
	PLA
	TAX
	PLA
	PLA
	LDA	$A6
	LDY	LINK_HMEMPTR
	STY	OPADDR
	LDY	LINK_HMEMPTR+1
	STY	OPADDR+1
	CPX	#$00	; NULL CHECK
	BEQ	:+
	JSR	OPJMP
:	STA	CHARPTR	; SAVE POINTER TO TEXT OBJECT
	STX	CHARPTR+1
	PLA		; PULL PARAMS ARRAY
	STA	TMP
	PLA
	TAX
	PLA
	PLA
	LDA	TMP
	JSR	OPJMP
	CLC
	ADC	#$02
	BCC	:+
	INX
:	STA	TMPTR
	STX	TMPTR+1
	LDY	#$07	; COPY PARAMETER ARRAY OVER
CPYPARMS:	LDA	(TMPTR),Y
	STA	PARMS,Y
	DEY
	BPL	CPYPARMS
	DVM_ENTER
	LDZPB	PARMS_OP	; SWITCH ON FUNCTION
	SWTCHB	13
	CASEB	10, UPDATEMOUSE	; MOVE MOUSE CURSOR
	CASEB	5,  PUTSTR	; PUT STRING
	CASEB	6,  PUTINVSTR	; PUT STRING
	CASEB	7,  PUTMOUSESTR	; PUT STRING
	CASEB	4,  PUTCHARS	; PUT RAW CHARS FROM BYTE ARRAY
	CASEB	8,  GETCHARS	; GET RAW CHARS FROM SCREEN INTO BYTE ARRAY
	CASEB	2,  FILLRECT	; FILL RECT WITH CHAR
	CASEB	3,  SCROLLRECT	; SCROLL RECT
	CASEB	11, SHOWMOUSE	; ENABLE MOUSE CURSOR
	CASEB	12, HIDEMOUSE	; DISABLE MOUSE CURSOR
	CASEB	16, TONE	; SIMPLE TONES
	CASEB	0,  INIT	; INIT TEXT UI MODE
	CASEB	1,  CLEANUP	; EXIT TEXT UI MODE
	LDCB	$FF	; DEFAULT: SET ERROR AND RETURN
	STZPB	PARMS_STATUS
	JUMP	DRETURN
;
; FILL RECT WITH CHAR
;
FILLRECT:	DVM_EXIT
FILL_LP:	CALCBASE	PARMS_Y, TMPTR
	CHECKMOUSE	PARMS_Y, TMPTR
FILL_ROW:	LDX	PARMS_WIDTH
	LDA	PARMS_X
	LSR
	TAY
	SEI
	BCS	FILL_ODD
FILL_EVN:	BIT	$C055	; PAGE2
	LDA	PARMS_CHAR_EVEN
	STA	(TMPTR),Y
	DEX
	BEQ	:+
FILL_ODD:	BIT	$C054	; PAGE1
	LDA	PARMS_CHAR_ODD
	STA	(TMPTR),Y
	INY
	DEX
	BNE	FILL_EVN
:	BIT	$C054	; PAGE1
	CLI
	INC	PARMS_Y
	DEC	PARMS_HEIGHT
	BNE	FILL_LP
FILL_EXIT:	DVM_ENTER
	JUMP	DRETURN
;
; PUT STRING
;
PUTINVSTR:	DVM_EXIT
	LDA	#$7F
	LDX	#$40
	BNE	:+
;
; PUT MOUSE STRING
;
PUTMOUSESTR:	DVM_EXIT
	LDA	#$7F
	LDX	#$00
	BEQ	:+
;
; FILL REMAINDER OF WIDTH
;
PUTS_FILL:	LDA	PARMS_COUNT
	BEQ	FILL_EXIT
	STA	PARMS_WIDTH
	LDA	#$01
	STA	PARMS_HEIGHT
	BNE	FILL_ROW
;
; PUT STRING
;
PUTSTR:	DVM_EXIT
	LDA	#$FF
	LDX	#$00
:	STA	$32
	STX	$24
	CALCBASE	PARMS_Y, TMPTR
	CHECKMOUSE	PARMS_Y, TMPTR
	LDY	#$00
	LDA	(CHARPTR),Y
	SEC
	SBC	PARMS_OFFSET
	BCC	PUTS_FILL
	BEQ	PUTS_FILL
	STA	PARMS_LEN
	LDA	PARMS_OFFSET
;	SEC		; SKIP LEN BYTE
	ADC	CHARPTR
	STA	CHARPTR
	SEI
	BCC	PUTS_LP
	INC	CHARPTR+1
PUTS_LP:	LDA	PARMS_X
	LSR
	TAY
	LDX	#$00
	LDA	(CHARPTR,X)
	BCS	:+
	INX
:	STA	$C054,X	; PAGE1 OR PAGE2
	ORA	#$80
	AND	$32
	CMP	#$60
	BCS	:+
	CMP	#$40
	BCC	:+
	EOR	$24
:	STA	(TMPTR),Y
	DEC	PARMS_COUNT
	BEQ	ARETURN
	INC	PARMS_X
	DEC	PARMS_LEN
	BEQ	PUTS_FILL
	INC	CHARPTR
	BNE	PUTS_LP
	INC	CHARPTR+1
	BNE	PUTS_LP
;	BEQ	ARETURN
DRETURN:	DVM_EXIT
ARETURN:
	BIT	$C054	; LEAVE PAGE1 SELECTED
.IFDEF	DEBUG
	LDX	#$FF
	STX	$32
	INX
	STX	$24
.ENDIF
	CLI
	LDY	#(MOUSESTATE - DISPATCH)
	LDA	(NATIVECODEPTR),Y
	BPL	:+
	DVM_ENTER
	CALL	UNHIDECURSOR
	DVM_EXIT
:	LDA	#$00
	PHA
	PHA
	PHA
	LDA	PARMS_STATUS	; PUSH RETURN STATUS
	PHA
	LDA	$A5	; PUSH RETURN ADDRESS
	PHA
	LDA	$A4
	PHA
	LDA	HMETHODCODE	; UNLOCK METHOD AND RETURN
	LDX	HMETHODCODE+1
	JMP	(LINK_HMEMUNLOCK)
;
; PUT BYTE ARRAY OF CHARS
;
PUTCHARS:	DVM_EXIT
	LDY	#$01
	LDA	(CHARPTR),Y
	DEY
	BEQ	:+
	LDA	#$FF
	BNE	:++
:	LDA	(CHARPTR),Y
:	SEC
	SBC	PARMS_OFFSET
	BCC	PUTC_EXIT
	BEQ	PUTC_EXIT
	STA	PARMS_LEN
	LDA	#$02
	CLC
	ADC	CHARPTR
	BCC	:+
	INC	CHARPTR+1
	CLC
:	ADC	PARMS_OFFSET
	STA	CHARPTR
	BCC	:+
	INC	CHARPTR+1
:	CALCBASE	PARMS_Y, TMPTR
	CHECKMOUSE	PARMS_Y, TMPTR
	LDA	PARMS_X
	LSR
	TAY
	LDX	#$00
	SEI
	BCS	PUTC_ODD
PUTC_EVN:	STA	$C055	; PAGE2
	LDA	(CHARPTR,X)
	STA	(TMPTR),Y
	DEC	PARMS_COUNT
	BEQ	PUTC_EXIT
	DEC	PARMS_LEN
	BEQ	PUTC_EXIT
	INC	CHARPTR
	BNE	PUTC_ODD
	INC	CHARPTR+1
PUTC_ODD:	STA	$C054	; PAGE1
	LDA	(CHARPTR,X)
	STA	(TMPTR),Y
	INY
	DEC	PARMS_COUNT
	BEQ	PUTC_EXIT
	DEC	PARMS_LEN
	BEQ	PUTC_EXIT
	INC	CHARPTR
	BNE	PUTC_EVN
	INC	CHARPTR+1
	BNE	PUTC_EVN
PUTC_EXIT:	DVM_ENTER
	JUMP	DRETURN
;
; GET CHARS INTO BYTE ARRAY
;
GETCHARS:	DVM_EXIT
	LDY	#$01
	LDA	(CHARPTR),Y
	DEY
	BEQ	:+
	LDA	#$FF
	BNE	:++
:	LDA	(CHARPTR),Y
:	SEC
	SBC	PARMS_OFFSET
	BCC	GETC_EXIT
	BEQ	GETC_EXIT
	STA	PARMS_LEN
	LDA	#$02
	CLC
	ADC	CHARPTR
	BCC	:+
	INC	CHARPTR+1
	CLC
:	ADC	PARMS_OFFSET
	STA	CHARPTR
	BCC	:+
	INC	CHARPTR+1
:	CALCBASE	PARMS_Y, TMPTR
	CHECKMOUSE	PARMS_Y, TMPTR
	LDA	PARMS_X
	LSR
	TAY
	LDX	#$00
	SEI
	BCS	GETC_ODD
GETC_EVN:	STA	$C055	; PAGE2
	LDA	(TMPTR),Y
	STA	(CHARPTR,X)
	DEC	PARMS_COUNT
	BEQ	GETC_EXIT
	DEC	PARMS_LEN
	BEQ	GETC_EXIT
	INC	CHARPTR
	BNE	GETC_ODD
	INC	CHARPTR+1
GETC_ODD:	STA	$C054	; PAGE1
	LDA	(TMPTR),Y
	INY
	STA	(CHARPTR,X)
	DEC	PARMS_COUNT
	BEQ	GETC_EXIT
	DEC	PARMS_LEN
	BEQ	GETC_EXIT
	INC	CHARPTR
	BNE	GETC_EVN
	INC	CHARPTR+1
	BNE	GETC_EVN
GETC_EXIT:	DVM_ENTER
	JUMP	DRETURN
;
; SCROLL RECT OF CHARS
;
SCROLLRECT:	LDZPB	PARMS_YDST
	LDZPB	PARMS_Y
	BRAB	SCROLLDOWN
SCROLLUP:	CALL	SCROLLROW
	DVM_EXIT
	INC	PARMS_Y
	INC	PARMS_YDST
	DEC	PARMS_HEIGHT
	BEQ	GETC_EXIT
	DVM_ENTER
	BRNCH	SCROLLUP
SCROLLDOWN:	LDZPB	PARMS_Y
	LDZPB	PARMS_HEIGHT
	ADDB
	DECRB
	STZPB	PARMS_Y
	LDZPB	PARMS_YDST
	LDZPB	PARMS_HEIGHT
	ADDB
	DECRB
	STZPB	PARMS_YDST
:	CALL	SCROLLROW
	DVM_EXIT
	DEC	PARMS_Y
	DEC	PARMS_YDST
	DEC	PARMS_HEIGHT
	BEQ	GETC_EXIT
	DVM_ENTER
	BRNCH	:-	
SCROLLROW:	DVM_EXIT
	CALCBASE	PARMS_Y, CHARPTR
	CHECKMOUSE	PARMS_Y, CHARPTR
	CALCBASE	PARMS_YDST, TMPTR
	CHECKMOUSE	PARMS_YDST, TMPTR
	LDA	PARMS_X
	LSR
	TAY
	LDX	PARMS_WIDTH
	SEI
	BCS	SCRL_ODD
SCRL_EVN:	STA	$C055	; PAGE2
	LDA	(CHARPTR),Y
	STA	(TMPTR),Y
	DEX
	BEQ	:+
SCRL_ODD:	STA	$C054	; PAGE1
	LDA	(CHARPTR),Y
	STA	(TMPTR),Y
	INY
	DEX
	BNE	SCRL_EVN
:	STA	$C054	; PAGE1
	CLI
	DVM_ENTER
	RET
;
; UPDATE MOUSE
;
UPDATEMOUSE:	LDPB	(NATIVECODEPTR), MOUSESTATE - DISPATCH
	BRZB	:+	; DISABLED
	DVM_EXIT
	LDY	#(MOUSEY - DISPATCH)
	LDA	(NATIVECODEPTR),Y
	STA	$24
	CALCBASE	$24, TMPTR
	DVM_ENTER
	LDZPW	TMPTR
	CALL	HIDECURSOR
	LDZPB	PARMS_X
	STPB	(NATIVECODEPTR), MOUSEX - DISPATCH
	LDZPB	PARMS_Y
	STPB	(NATIVECODEPTR), MOUSEY - DISPATCH
	LDZPB	PARMS_CURSOR
	STPB	(NATIVECODEPTR), MOUSECURSOR - DISPATCH
	DVM_EXIT
	CALCBASE	PARMS_Y, TMPTR
	DVM_ENTER
	LDZPW	TMPTR
	CALL	SHOWCURSOR
:	JUMP	DRETURN
;
; HIDE MOUSE
;
HIDEMOUSE:	LDPB	(NATIVECODEPTR), MOUSESTATE - DISPATCH
	BRZB	:+	; ALREADY DISABLED
	JUMP	DRETURN
	LD0B		; CLEAR ENABLED FLAG
	STPB	(NATIVECODEPTR), MOUSESTATE - DISPATCH
	LDPB	(NATIVECODEPTR), MOUSEY - DISPATCH
	DVM_EXIT
	PLA
	STA	PARMS_Y
	CALCBASE	PARMS_Y, TMPTR
	DVM_ENTER
	LDZPW	TMPTR
	CALL	HIDECURSOR
	LDCB	$FF
	STPB	(NATIVECODEPTR), MOUSEY - DISPATCH
:	JUMP	DRETURN	
;
; HIDE MOUSE CURSOR
;
HIDECURSOR:	STZPW	OPADDR
	LDPB	(NATIVECODEPTR), MOUSESAVEUNDER - DISPATCH
	DVM_EXIT
	LDY	#(MOUSEX - DISPATCH)
	LDA	(NATIVECODEPTR),Y
	LSR
	TAY
	LDX	#$00
	SEI
	BCS	:+
	INX
:	STA	$C054,X	; PAGE1 OR PAGE2
	PLA		; PULL SAVEUNDER CHARACTER
	STA	(OPADDR),Y
	STA	$C054	; PAGE1
	CLI
	LDY	#(MOUSESTATE - DISPATCH)
	LDA	(NATIVECODEPTR),Y
	ORA	#$80	; SET CURSOR HIDDEN FLAG
	STA	(NATIVECODEPTR),Y
	DVM_ENTER
	RET
;
; SHOW MOUSE
;
SHOWMOUSE:	LDPB	(NATIVECODEPTR), MOUSESTATE - DISPATCH
	BRNZB	:+	; ALREADY ENABLED
	LD1B		; SET ENABLED FLAG / CLEAR HIDDEN FLAG
	STPB	(NATIVECODEPTR), MOUSESTATE - DISPATCH
	LDZPB	PARMS_X
	STPB	(NATIVECODEPTR), MOUSEX - DISPATCH
	LDZPB	PARMS_Y
	STPB	(NATIVECODEPTR), MOUSEY - DISPATCH
	DVM_EXIT
	CALCBASE	PARMS_Y, TMPTR
	DVM_ENTER
	LDZPW	TMPTR
	CALL	SHOWCURSOR
:	JUMP	DRETURN
;
; UNHIDE MOUSE CURSOR
;
UNHIDECURSOR:	LD1B		; SET ENABLED FLAG / CLEAR HIDDEN FLAG
	STPB	(NATIVECODEPTR), MOUSESTATE - DISPATCH
	LDPB	(NATIVECODEPTR), MOUSEY - DISPATCH
	STZPB	PARMS_Y
	DVM_EXIT
	CALCBASE	PARMS_Y, TMPTR
	DVM_ENTER
	LDZPW	TMPTR
;
; SHOW MOUSE CURSOR
;
SHOWCURSOR:	STZPW	OPADDR
	LDPB	(NATIVECODEPTR), MOUSECURSOR - DISPATCH
	DVM_EXIT
	LDY	#(MOUSEX - DISPATCH)
	LDA	(NATIVECODEPTR),Y
	LSR
	TAY
	LDX	#$00
	SEI
	BCS	:+
	INX
:	STA	$C054,X	; PAGE1 OR PAGE2
	LDA	(OPADDR),Y
	TAX
	PLA		; PULL MOUSECURSOR
	STA	(OPADDR),Y
	STA	$C054	; PAGE1
	CLI
	TXA
	LDY	#(MOUSESAVEUNDER - DISPATCH)
	STA	(NATIVECODEPTR),Y
	LDY	#(MOUSESTATE - DISPATCH)
	LDA	(NATIVECODEPTR),Y
	AND	#$7F	; CLEAR CURSOR HIDDEN FLAG
	ORA	#$01	; SET ACTIVE FLAG
	STA	(NATIVECODEPTR),Y
	DVM_ENTER
	RET
;
; TONE
;
TONE:	DVM_EXIT
	LDA	PARMS_FREQUENCY
	EOR	#$FF
	STA	PARMS_LEN
	LDA	PARMS_FREQUENCY
	SEC
	SBC	PARMS_TIMBRE
	STA	PARMS_FREQUENCY
	SEI		; DISABLE INTERRUPTS
TONELOOPOUTR:	LDX	PARMS_LEN
TONELOOP:	LDY	PARMS_TIMBRE
	BIT	$C030
TONEDELAY1:	DEY
	BNE	TONEDELAY1
	BIT	$C030
	LDY	PARMS_FREQUENCY
TONEDELAY2:	DEY
	BNE	TONEDELAY2
	DEX
	BNE	TONELOOP
	DEC	PARMS_DURATION
	BNE	TONELOOPOUTR
	DVM_ENTER
	JUMP	DRETURN
;
; INIT TEXT MODE AND MOUSETEXT
;
INIT:	DVM_EXIT
	LDX	#$FF
	LDA	MACHID
	BPL	:+
	BIT	ROMIN
.IFDEF	DEBUG_DUMP
	LDA	$36
	PHA
	LDA	$37
	PHA
.ENDIF
	LDA	#$00
	TAX
	TAY
	JSR	$C300
	LDA	#$1B	; TURN ON MOUSETEXT
	JSR	$FDED
.IFDEF	DEBUG_DUMP
	PLA
	STA	$37
	PLA
	STA	$36
.ENDIF
	SEI
	BIT	LCBNK2
	BIT	LCBNK2
	CLI
	LDX	#$00
:	STX	$A8
	DVM_ENTER
	JUMP	DRETURN
;
; TURN OFF MOUSETEXT AND CLEAN UP
;
CLEANUP:	DVM_EXIT
	LDX	#$FF
	STX	$32
	INX
	STX	$24
	STX	PARMS_STATUS
	BIT	ROMIN
	BIT	$C054
	JSR	$FC58	; HOME
	LDA	#$18	; TURN OFF MOUSETEXT
	JSR	$FDED
	LDA	#$11	; TURN OFF 80 COLUMN
	JSR	$FDED
	SEI
	BIT	LCBNK2
	BIT	LCBNK2
	CLI
	DVM_ENTER
	JUMP	DRETURN
M1C0END:
;* EXCEPTION TABLE
	.BYTE	$00,$00	; COUNT 0
;* CODE ATTRIB
	.BYTE	$00,$00	; ATTRIB COUNT 0
M1A0END:
;*
;* GLOBAL ATTRIBUTES
;*
	.BYTE	$00,$00	; ATTRIB COUNT 0
